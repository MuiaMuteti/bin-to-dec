{"version":3,"sources":["components/Input.js","components/ModeSelector.js","components/Output.js","App.js","index.js"],"names":["Input","props","mode","isBinary","pattern","placeholder","className","type","name","value","valueDigits","onChange","e","handleInputChange","target","ModeSelector","checked","handleChange","Output","result","App","useState","setMode","inputDigits","setInputDigits","from","to","newDigits","parseInt","isNaN","toString","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6RAyBeA,MApBf,SAAeC,GAEX,IAAMC,EAAOD,EAAME,SAAW,SAAW,UACnCC,EAAUH,EAAME,SAAW,QAAU,SACrCE,EAAcJ,EAAME,SAAW,cAAgB,aAErD,OACI,sBAAKG,UAAU,iBAAf,UACI,2CAAcJ,EAAd,aACA,uBACIK,KAAK,OACLC,KAAK,SACLJ,QAASA,EACTC,YAAaA,EACbI,MAAOR,EAAMS,YACbC,SAAU,SAACC,GAAD,OAAKX,EAAMY,kBAAkBD,EAAEE,OAAOL,c,MCUjDM,MAzBf,SAAsBd,GAElB,OACI,sBAAKK,UAAU,OAAf,UACI,4CACA,sBAAKA,UAAU,eAAf,UACI,uBACIC,KAAK,QACLC,KAAK,OACLC,MAAM,SACNO,QAAwB,WAAff,EAAMC,KACfS,SAAU,SAACC,GAAD,OAAKX,EAAMgB,aAAaL,EAAEE,OAAOL,UAC/C,sDACA,uBACIF,KAAK,QACLC,KAAK,OACLC,MAAM,UACNO,QAAwB,YAAff,EAAMC,KACfS,SAAU,SAACC,GAAD,OAAKX,EAAMgB,aAAaL,EAAEE,OAAOL,UAC/C,6D,MCXDS,MAVf,SAAgBjB,GACZ,IAAMC,EAAOD,EAAME,SAAU,UAAY,SACzC,OACI,sBAAKG,UAAU,SAAf,UACI,oBAAGA,UAAU,OAAb,UAAqBJ,EAArB,iBACA,mBAAGI,UAAU,SAAb,SAAuBL,EAAMkB,aCuD1BC,MAvDf,WAAe,MAEWC,mBAAS,UAFpB,mBAENnB,EAFM,KAEAoB,EAFA,OAIyBD,mBAAS,IAJlC,mBAINE,EAJM,KAIOC,EAJP,KAiCPrB,EAAqB,WAATD,EACZuB,EAAOtB,EAAW,SAAW,UAC7BuB,EAAKvB,EAAW,UAAY,SAElC,OACE,sBAAKG,UAAU,MAAf,UACE,+BAAKmB,EAAL,OAAeC,EAAf,gBACA,cAAC,EAAD,CACExB,KAAMA,EACNe,aAnCN,SAAoBf,GAClBoB,EAAQpB,GACRsB,EAAe,OAmCb,cAAC,EAAD,CACErB,SAAUA,EACVO,YAAaa,EACbV,kBAlCN,SAA2Bc,GACzBH,EAAeG,MAkCb,cAAC,EAAD,CACExB,SAAUA,EACVgB,OAhCN,WACE,IAAMhB,EAAqB,WAATD,EAEdiB,EAASS,SAASL,EADRpB,EAAU,EAAI,IAE5B,OAAI0B,MAAMV,GACD,EAELhB,EACKgB,EAEAA,EAAOW,SAAS,GAsBbX,SCrDhBY,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.44db0056.chunk.js","sourcesContent":["import './Input.css';\r\n\r\n//allows user to enter digits for conversion\r\n//controlled component --> isBinary, valueDigits, handleInputChange\r\n\r\nfunction Input(props) {\r\n    //some conditional rendering\r\n    const mode = props.isBinary ? \"binary\" : \"decimal\";\r\n    const pattern = props.isBinary ? \"[01]*\" : \"[0-9]*\";\r\n    const placeholder = props.isBinary ? \"e.g. 101010\" : \"e.g. 12345\";\r\n\r\n    return (\r\n        <div className=\"inputContainer\">\r\n            <p>Enter the {mode} digits</p>\r\n            <input \r\n                type=\"text\" \r\n                name=\"digits\"\r\n                pattern={pattern}\r\n                placeholder={placeholder} \r\n                value={props.valueDigits}\r\n                onChange={(e)=>props.handleInputChange(e.target.value)} ></input>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Input;","import './ModeSelector.css';\r\n\r\n//used to change between decimal and binary mode\r\n//it is a controlled component\r\n//handleChange and mode are passed in from the parent using props\r\nfunction ModeSelector(props)\r\n{\r\n    return (\r\n        <div className=\"mode\">\r\n            <p>Select mode</p>\r\n            <div className=\"modeControls\">\r\n                <input \r\n                    type=\"radio\" \r\n                    name=\"mode\" \r\n                    value=\"binary\" \r\n                    checked={props.mode === \"binary\"}\r\n                    onChange={(e)=>props.handleChange(e.target.value)} />\r\n                <label>Binary to decimal</label>\r\n                <input \r\n                    type=\"radio\" \r\n                    name=\"mode\" \r\n                    value=\"decimal\" \r\n                    checked={props.mode === \"decimal\"}\r\n                    onChange={(e)=>props.handleChange(e.target.value)} />\r\n                <label>Decimal to binary</label>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ModeSelector;","import './Output.css';\r\n\r\n//used to output the result of the conversion\r\nfunction Output(props) {\r\n    const mode = props.isBinary? \"Decimal\" : \"Binary\";\r\n    return (\r\n        <div className=\"output\">\r\n            <p className=\"desc\">{mode} equivalent</p>\r\n            <p className=\"result\">{props.result}</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Output;","import './App.css';\nimport Input from './components/Input';\nimport ModeSelector from './components/ModeSelector';\nimport Output from './components/Output';\n\nimport {useState} from 'react';\n\n//top level component\nfunction App() {\n  //current mode, binary or decimal\n  const [mode, setMode] = useState(\"binary\");\n  //store user input\n  const [inputDigits, setInputDigits] = useState(\"\");\n\n  //set mode and clear previous input\n  function changeMode(mode) {\n    setMode(mode);\n    setInputDigits(\"\");\n  }\n\n  //set user input onchange\n  function handleInputChange(newDigits) {\n    setInputDigits(newDigits);\n  }\n\n  //return output based on mode\n  function result() {\n    const isBinary = (mode === \"binary\");\n    const radix = isBinary? 2 : 10;\n    let result = parseInt(inputDigits, radix);\n    if (isNaN(result)) {\n      return 0;\n    }\n    if (isBinary) {\n      return result;\n    } else {\n      return result.toString(2);\n    }\n  }\n\n// set appropriate header\n  const isBinary = (mode === \"binary\");\n  const from = isBinary ? \"Binary\" : \"Decimal\";\n  const to = isBinary ? \"Decimal\" : \"Binary\";\n\n  return (\n    <div className=\"App\">\n      <h1>{from} to {to} Converter</h1>\n      <ModeSelector\n        mode={mode}\n        handleChange={changeMode}\n         />\n      <Input \n        isBinary={isBinary}\n        valueDigits={inputDigits}\n        handleInputChange={handleInputChange} />\n      <Output \n        isBinary={isBinary}\n        result={result()} />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}